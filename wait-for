#!/usr/bin/env sh

set -- "$@" -- "$TIMEOUT" "$QUIET" "$HOST" "$PORT" "$result"
TIMEOUT=15
QUIET=

usage() {
  cat >&2 <<USAGE
Usage:
  $0 host:port [-t timeout] [-- command args]
  -q | --quiet                        Do not output any status messages
  -t TIMEOUT | --timeout=timeout      Timeout in seconds, or ∞ for waiting forever
  -- COMMAND ARGS                     Execute command with args after the test finishes

Source:
  https://github.com/sd-yip/wait-for/

USAGE
  exit "$1"
}

wait_for() {
  while :; do
    nc -z "$HOST" "$PORT" >/dev/null 2>&1

    result=$?
    if [ $result -eq 0 ]; then
      if [ $# -gt 6 ]; then
        for result in $(seq $(($# - 6))); do
          result=$1
          shift
          set -- "$@" "$result"
        done

        TIMEOUT=$2 QUIET=$3 HOST=$4 PORT=$5 result=$6
        shift 6
        exec "$@"
      fi
      exit 0
    fi

    case $TIMEOUT in
      ∞) ;;
      0) break ;;
      *) TIMEOUT=$((TIMEOUT - 1))
    esac

    sleep 1
  done

  if [ -z "$QUIET" ]; then
    echo >&2 'Operation timed out'
  fi
  exit 1
}

while :; do
  case $1 in
    *:*)
    PORT=$(echo "$1" | awk -F: '{print $NF}')
    HOST=${1%:$PORT}
    shift 1
    ;;
    -q|--quiet)
    QUIET=1
    shift 1
    ;;
    -q-*)
    echo >&2 "Unknown option: $1"
    usage 1
    ;;
    -q*)
    QUIET=1
    result=$1
    shift 1
    set -- -"${result#-q}" "$@"
    ;;
    -t|--timeout)
    TIMEOUT="$2"
    shift 2
    ;;
    -t*)
    TIMEOUT="${1#-t}"
    shift 1
    ;;
    --timeout=*)
    TIMEOUT="${1#*=}"
    shift 1
    ;;
    --)
    shift
    break
    ;;
    --help)
    usage 0
    ;;
    -*)
    echo >&2 "Unknown option: $1"
    usage 1
    ;;
    *)
    echo >&2 "Unknown argument: $1"
    usage 1
  esac
done

if [ "$TIMEOUT" -ge 0 ] 2>/dev/null; then
  TIMEOUT=$((TIMEOUT))
else
  # shellcheck disable=SC2018,SC2019
  case $(echo $TIMEOUT | tr A-Z a-z) in
    ∞|inf|infinity) TIMEOUT='∞' ;;
    *) echo >&2 "Error: invalid timeout '$TIMEOUT'"; usage 3
  esac
fi

if [ -z "$HOST" ]; then
  echo >&2 'Error: you need to provide a host and port to test.'
  usage 2
fi

if ! command -v nc >/dev/null; then
  echo >&2 'Error: nc command is missing!'
  exit 4
fi

wait_for "$@"
